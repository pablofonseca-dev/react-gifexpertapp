{"version":3,"sources":["Components/AddCategory/AddCategory.js","Helpers/getGifs.js","Components/GifGridItem/GifGridItem.js","Components/GifGrid/GifGrid.js","Hooks/useFetchGifs.js","Components/GifExpertApp/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","categoryName","document","getElementById","test","value","type","id","placeholder","onChange","currentTarget","handleInputChange","autoComplete","getGifs","gifName","a","url","encodeURI","fetch","result","json","data","gifs","filter","img","img_specific_data","images","downsized_medium","width","map","title","GifGridItem","imageData","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","isLoading","animate__animated","animate__flash","image","GifExpertApp","ReactDOM","render"],"mappings":"uSAyCeA,G,MApCK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAAgB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAkBjD,OACI,cAAC,WAAD,UACI,uBAAMC,UAAU,eAAeC,SAZlB,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAeC,SAASC,eAAe,iBACvB,oBACHC,KAAKH,EAAaI,SACjCb,EAAc,GAAD,mBAAKC,GAAL,CAAiBQ,EAAaI,SAC3CT,EAAc,MAMd,UACI,uBAAOU,KAAK,OAAOT,UAAU,QAAQU,GAAG,gBACxCC,YAAY,kBAAkBC,SAAU,SAACV,GAAD,OAlB1B,SAACA,GACvBH,EAAcG,EAAEW,cAAcL,OAiByBM,CAAkBZ,IAAIM,MAAOV,EAAYiB,aAAa,QACrG,wBAAQf,UAAU,yBAAlB,SACI,sBAAMA,UAAU,sBAAhB,6B,uBCLLgB,EAxBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACG,mCACW,IACpBC,EAHM,uDACG,mCADH,cAG4DC,UAAUH,GAHtE,mBAEc,KAFd,SAISI,MAAMF,GAJf,cAING,EAJM,gBAKSA,EAAOC,OALhB,uBAKLC,EALK,EAKLA,KACDC,EAAOD,EAAKE,QAAO,SAAAC,GACT,IAAMC,EAAoBD,EAAIE,OAAOC,iBACrC,OAAGF,EAAkBG,OAAS,KAAOH,EAAkBG,OAAS,IACrDJ,EAEJ,QACRK,KAAI,SAAAL,GACa,IAAD,EAAf,OAAU,MAAPA,EACQ,CACHjB,GAAIiB,EAAIjB,GACRuB,MAAON,EAAIM,MACXd,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,KAEnC,QAnBX,kBAqBLM,GArBK,4CAAH,sDCoBES,G,MAfK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAClB,OACI,cAAC,WAAD,UACI,sBAAKnC,UAAU,8CAAf,UACI,qBAAKA,UAAU,mBAAmBoC,IAAKD,EAAUhB,IAAKkB,IAAKF,EAAUF,QACrE,oBAAIjC,UAAU,mBAAd,SAAkCmC,EAAUF,UAFkBE,EAAUzB,Q,MCazE4B,MAhBf,YAA6B,IAAXrB,EAAU,EAAVA,QAAU,ECHA,SAACA,GAAa,IAAD,EAEXpB,mBACtB,CACI2B,KAAM,GACNe,SAAS,IALoB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAoBrC,OAVAC,qBAAU,WACN1B,EAAQC,GACP0B,MAAK,SAAAlB,GACFgB,EAAS,CACLjB,KAAMC,EACNc,SAAS,SAGlB,CAACtB,IAEGuB,EDhB4BI,CAAa3B,GAAzCO,EADiB,EACjBA,KAAeqB,EADE,EACXN,QAEb,OACI,qCACI,6BAAKtB,IACH4B,GAAc,mBAAGC,mBAAiB,EAACC,gBAAc,EAAnC,qBAChB,oBAAI/C,UAAU,kBAAd,SAEQwB,EAAKQ,KAAI,SAACgB,GAAD,OAAW,cAAC,EAAD,CAAab,UAAWa,aEUjDC,G,YAhBM,WAAO,IAAD,EAEapD,mBAAS,IAFtB,mBAEhBD,EAFgB,KAEJD,EAFI,KAIvB,OACI,eAAC,WAAD,WACI,oBAAIK,UAAU,cAAd,4BACA,cAAC,EAAD,CAAaL,cAAeA,EAAeC,WAAYA,IAEnDA,EAAWoC,KAAI,SAACxB,GAAD,OAAW,cAAC,EAAD,CAASS,QAAST,Y,MCX5D0C,IAASC,OACL,cAAC,EAAD,IACF9C,SAASC,eAAe,W","file":"static/js/main.eb479450.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './AddCategory.css';\r\n\r\nconst AddCategory = ({setCategories, categories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.currentTarget.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const categoryName = document.getElementById(\"categoryInput\");\r\n        let spaceCheckRegex = /^[^\\s]*.+[^\\s]$/gi;\r\n        if(spaceCheckRegex.test(categoryName.value)){\r\n            setCategories([...categories, categoryName.value]);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <form className=\"category-box\" onSubmit={handleSubmit}>\r\n                <input type=\"text\" className=\"input\" id=\"categoryInput\" \r\n                placeholder=\"Search category\" onChange={(e) => handleInputChange(e)} value={inputValue} autoComplete=\"off\"/>\r\n                <button className=\"button button--success\">\r\n                    <span className=\"button__description\">Search</span>\r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired, \r\n    categories: PropTypes.array.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (gifName) => {\r\n    const apiKey = \"r926c1YK2TroOtNxEw7xsbpgpHNXo4D2\";\r\n    const contentRatingFlag = 'g'; \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(gifName)}&rating=${contentRatingFlag}`; \r\n    const result = await fetch(url);\r\n    const {data} = await result.json(); \r\n    const gifs = data.filter(img => {\r\n                    const img_specific_data = img.images.downsized_medium;\r\n                    if(img_specific_data.width >= 400 && img_specific_data.width <= 490){\r\n                        return img; \r\n                    }\r\n                    return null;\r\n                }).map(img => {\r\n                    if(img != null){\r\n                        return {\r\n                            id: img.id, \r\n                            title: img.title, \r\n                            url: img.images?.downsized_medium.url}\r\n                    }\r\n                    return null; \r\n                });\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs; ","import React, {Fragment, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './GifGridItem.css';\r\n\r\nconst GifGridItem = ({imageData}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"grid-item animate__animated animate__fadeIn\" key={imageData.id}>\r\n                <img className=\"grid-item__image\" src={imageData.url} alt={imageData.title}/>\r\n                <h4 className=\"grid-item__title\">{imageData.title}</h4>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../../Hooks/useFetchGifs';\r\nimport GifGridItem from '../GifGridItem/GifGridItem';\r\nimport './GifGrid.css';\r\n\r\nfunction GifGrid({gifName}) {\r\n    const {data, loading: isLoading} = useFetchGifs(gifName);\r\n    \r\n    return (\r\n        <>\r\n            <h2>{gifName}</h2>\r\n            {(isLoading) && <p animate__animated animate__flash>Loading</p>}\r\n            <ul className=\"categories-grid\">\r\n                {\r\n                    data.map((image) => <GifGridItem imageData={image}></GifGridItem>)\r\n                }\r\n            </ul>           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import {useEffect, useState} from 'react';\r\nimport getGifs from '../Helpers/getGifs';\r\nexport const useFetchGifs = (gifName) => {\r\n\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [], \r\n            loading: true,\r\n        }\r\n    );\r\n\r\n\r\n    useEffect(() => {\r\n        getGifs(gifName)\r\n        .then(gifs => {\r\n            setState({\r\n                data: gifs, \r\n                loading: false\r\n            });\r\n        });\r\n    }, [gifName]);\r\n\r\n    return state; //{data:[], loading: true}\r\n}","import React, {Fragment, useState} from 'react';\r\n\r\nimport AddCategory from '../AddCategory/AddCategory';\r\nimport GifGrid from '../GifGrid/GifGrid';\r\n\r\nimport './GifExpertApp.css'\r\nimport './fonts.css'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1 className=\"main-header\">Gif Expert App</h1>\r\n            <AddCategory setCategories={setCategories} categories={categories}></AddCategory>\r\n            {\r\n                categories.map((value) => <GifGrid gifName={value}></GifGrid>)\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp/GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}